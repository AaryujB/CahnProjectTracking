{"ast":null,"code":"// frontend/src/utils/dateUtils.js\n\n/**\n * Formats a date for display, ensuring no timezone conversion issues\n * @param {string|Date} dateInput - The date to format\n * @returns {string} - Formatted date string (MM/DD/YYYY)\n */\nexport const formatDateForDisplay = dateInput => {\n  if (!dateInput) return '';\n\n  // If it's already a date object, convert to string first\n  const dateStr = dateInput instanceof Date ? dateInput.toISOString() : dateInput;\n\n  // Extract just the date part (YYYY-MM-DD) to avoid timezone issues\n  const datePart = dateStr.split('T')[0];\n  const [year, month, day] = datePart.split('-');\n\n  // Create date using local timezone to avoid conversion\n  const date = new Date(year, month - 1, day);\n  return date.toLocaleDateString();\n};\n\n/**\n * Formats a date for input fields (YYYY-MM-DD format)\n * @param {string|Date} dateInput - The date to format\n * @returns {string} - Date in YYYY-MM-DD format\n */\nexport const formatDateForInput = dateInput => {\n  if (!dateInput) return '';\n\n  // If it's already a date object, convert to string first\n  const dateStr = dateInput instanceof Date ? dateInput.toISOString() : dateInput;\n\n  // Extract just the date part (YYYY-MM-DD)\n  return dateStr.split('T')[0];\n};\n\n/**\n * Creates a date string that won't have timezone conversion issues\n * @param {string} dateInput - Date input from HTML date field (YYYY-MM-DD)\n * @returns {string} - ISO string for the date at local midnight\n */\nexport const createLocalDateString = dateInput => {\n  if (!dateInput) return '';\n  const [year, month, day] = dateInput.split('-');\n  const date = new Date(year, month - 1, day);\n  return date.toISOString();\n};","map":{"version":3,"names":["formatDateForDisplay","dateInput","dateStr","Date","toISOString","datePart","split","year","month","day","date","toLocaleDateString","formatDateForInput","createLocalDateString"],"sources":["/Users/aaryujbhushan/Documents/cahnprojecttracking/frontend/src/utils/dateUtils.js"],"sourcesContent":["// frontend/src/utils/dateUtils.js\n\n/**\n * Formats a date for display, ensuring no timezone conversion issues\n * @param {string|Date} dateInput - The date to format\n * @returns {string} - Formatted date string (MM/DD/YYYY)\n */\nexport const formatDateForDisplay = (dateInput) => {\n    if (!dateInput) return '';\n    \n    // If it's already a date object, convert to string first\n    const dateStr = dateInput instanceof Date ? dateInput.toISOString() : dateInput;\n    \n    // Extract just the date part (YYYY-MM-DD) to avoid timezone issues\n    const datePart = dateStr.split('T')[0];\n    const [year, month, day] = datePart.split('-');\n    \n    // Create date using local timezone to avoid conversion\n    const date = new Date(year, month - 1, day);\n    \n    return date.toLocaleDateString();\n  };\n  \n  /**\n   * Formats a date for input fields (YYYY-MM-DD format)\n   * @param {string|Date} dateInput - The date to format\n   * @returns {string} - Date in YYYY-MM-DD format\n   */\n  export const formatDateForInput = (dateInput) => {\n    if (!dateInput) return '';\n    \n    // If it's already a date object, convert to string first\n    const dateStr = dateInput instanceof Date ? dateInput.toISOString() : dateInput;\n    \n    // Extract just the date part (YYYY-MM-DD)\n    return dateStr.split('T')[0];\n  };\n  \n  /**\n   * Creates a date string that won't have timezone conversion issues\n   * @param {string} dateInput - Date input from HTML date field (YYYY-MM-DD)\n   * @returns {string} - ISO string for the date at local midnight\n   */\n  export const createLocalDateString = (dateInput) => {\n    if (!dateInput) return '';\n    \n    const [year, month, day] = dateInput.split('-');\n    const date = new Date(year, month - 1, day);\n    \n    return date.toISOString();\n  };"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAIC,SAAS,IAAK;EAC/C,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;;EAEzB;EACA,MAAMC,OAAO,GAAGD,SAAS,YAAYE,IAAI,GAAGF,SAAS,CAACG,WAAW,CAAC,CAAC,GAAGH,SAAS;;EAE/E;EACA,MAAMI,QAAQ,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGJ,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;;EAE9C;EACA,MAAMI,IAAI,GAAG,IAAIP,IAAI,CAACI,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;EAE3C,OAAOC,IAAI,CAACC,kBAAkB,CAAC,CAAC;AAClC,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMC,kBAAkB,GAAIX,SAAS,IAAK;EAC/C,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;;EAEzB;EACA,MAAMC,OAAO,GAAGD,SAAS,YAAYE,IAAI,GAAGF,SAAS,CAACG,WAAW,CAAC,CAAC,GAAGH,SAAS;;EAE/E;EACA,OAAOC,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMO,qBAAqB,GAAIZ,SAAS,IAAK;EAClD,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;EAEzB,MAAM,CAACM,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGR,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/C,MAAMI,IAAI,GAAG,IAAIP,IAAI,CAACI,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;EAE3C,OAAOC,IAAI,CAACN,WAAW,CAAC,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}